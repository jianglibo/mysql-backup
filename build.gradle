buildscript {
    ext {
        springBootVersion = '2.0.2.RELEASE'
    }
    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:1.0.5.RELEASE")
    }
}

plugins {
    id "org.flywaydb.flyway" version "5.0.7"
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

// https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/html/

eclipse {
    classpath {
        downloadSources = true
    }
}
springBoot {
    mainClassName = 'com.go2wheel.mysqlbackup.StartPointer'
//    buildInfo()
    buildInfo {
		properties {
			additional = [
				'a': 'alpha',
				'b': 'bravo'
			]
		}
	}
}

bootJar {
	classifier = 'boot'
}

// gradle flywayMigrate
// gradle flywayRepair
flyway {
    url = project.ext['flyway.url']
    user = project.ext['flyway.user']
    password = project.ext['flyway.password']
    locations = project.ext['flyway.locations']
    baselineVersion = '1'
}

archivesBaseName = 'mysql-backup'
version = '1.0.2'

sourceSets {
    main {
        resources {
            exclude '**/node_modules/*'
            exclude '**/bower_components/*'
        }
    }
}

/*
jar {
    baseName = 'mysql-backup'
    version = '0.0.1-SNAPSHOT'
}
*/
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
}


configurations {
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter')
    compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile('org.springframework.boot:spring-boot-starter-quartz')
    compile('org.springframework.boot:spring-boot-starter-aop')
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-validation")
    compile("org.springframework.boot:spring-boot-starter-mail")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.boot:spring-boot-starter-freemarker")
    
    // https://mvnrepository.com/artifact/com.profesorfalken/jPowerShell
	compile group: 'com.profesorfalken', name: 'jPowerShell', version: '2.1'
    
    
	compile('org.springframework.shell:spring-shell-starter:2.0.0.RELEASE')
	// https://mvnrepository.com/artifact/com.hierynomus/sshj
	// compile group: 'com.hierynomus', name: 'sshj', version: '0.24.0'
	// https://mvnrepository.com/artifact/com.jcraft/jzlib
	compile group: 'com.jcraft', name: 'jzlib', version: '1.1.3'
	// https://mvnrepository.com/artifact/net.sf.expectit/expectit-core
	compile group: 'net.sf.expectit', name: 'expectit-core', version: '0.9.0'
	// https://mvnrepository.com/artifact/org.apache.httpcomponents/fluent-hc
	compile group: 'org.apache.httpcomponents', name: 'fluent-hc', version: '4.5.5'
	
	// https://mvnrepository.com/artifact/org.hsqldb/hsqldb
	compile group: 'org.hsqldb', name: 'hsqldb', version: '2.4.0'
	
	// https://mvnrepository.com/artifact/org.flywaydb/flyway-core
	compile group: 'org.flywaydb', name: 'flyway-core', version: '5.0.7'
	
	// https://mvnrepository.com/artifact/org.jooq/jooq
	compile group: 'org.jooq', name: 'jooq', version: '3.10.7'
	
	// https://mvnrepository.com/artifact/org.jooq/jooq-meta
	compile group: 'org.jooq', name: 'jooq-meta', version: '3.10.7'
	
	// https://mvnrepository.com/artifact/org.jooq/jooq-codegen
	compile group: 'org.jooq', name: 'jooq-codegen', version: '3.10.7'
	
	
	// https://mvnrepository.com/artifact/com.jcraft/jsch
	compile group: 'com.jcraft', name: 'jsch', version: '0.1.54'
	
	
//	testCompile("junit:junit")
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}

task copyFilesToArchive(type: Copy) {
    from "${buildDir}/../explained.docx", "${buildDir}/../start.bat", "${buildDir}/../src/main/resources/application.properties"
    
    from("${buildDir}/../") {
        include "notingit/**", "templates/**", "static/**"
    }
    from "${buildDir}/libs/mysql-backup-" + project['version'] +  "-boot.jar"
    
    into "${buildDir}/archive/"
}

/*
task renameJar(type: Copy) {
    from "${buildDir}/libs/mysql-backup-" + project['version'] +  "-boot.jar"
    
    rename 'mysql-backup-.*-boot.jar', 'mysql-backup-boot.jar'
    
    into "${buildDir}/libs/"
}
*/
task packmyzip(type: Zip) {
    archiveName = project['archivesBaseName'] + '-' + project['version'] + ".zip"
    destinationDir = file("${buildDir}/dist")

    from "${buildDir}/archive"
}

bootJar.dependsOn bootBuildInfo
copyFilesToArchive.dependsOn bootJar
packmyzip.dependsOn copyFilesToArchive

task writeVersionFile() << {
   def props = new Properties()
   def writer = new FileWriter(file(project['buildDir'] + "/merged.properties"))
   try {
      props.store(writer, 'Some comment')
      writer.flush()
   } finally {
      writer.close()
   }
}

task (v) << {
	println project['buildDir']
}